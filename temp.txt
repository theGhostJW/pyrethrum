BoundaryLog (StartRun (RunTitle {unRunTitle = "Sample RunConfig"}) (Object (fromList [("environment",String "TST"),("country",String "AU"),("runTitle",String "Sample RunConfig"),("depth",String "DeepRegression")])))
BoundaryLog (FilterLog [FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.Rough"}, testTitle = "This is a Rough Test", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.Rough")])),("countries",Array [String "AU",String "NZ"]),("active",Bool True),("header",String "This is a Rough Test"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Nothing},FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.RoughDisabled"}, testTitle = "This is a Rough Disabled Test", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.RoughDisabled")])),("countries",Array [String "AU",String "NZ"]),("active",Bool False),("header",String "This is a Rough Disabled Test"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Just "test must be is active"},FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.Simple"}, testTitle = "This Simple Test Only Uses Ensure Effects", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.Simple")])),("countries",Array [String "AU"]),("active",Bool True),("header",String "This Simple Test Only Uses Ensure Effects"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Nothing},FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.RoughIntState"}, testTitle = "This is a Rough Test", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.RoughIntState")])),("countries",Array [String "AU",String "NZ"]),("active",Bool True),("header",String "This is a Rough Test"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Nothing},FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.Rough2"}, testTitle = "This is a Rough Test", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.Rough2")])),("countries",Array [String "AU",String "NZ"]),("active",Bool True),("header",String "This is a Rough Test"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Nothing},FilterResult {testInfo = TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.Simple2"}, testTitle = "This Simple Test Only Uses Ensure Effects", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.Simple2")])),("countries",Array [String "AU"]),("active",Bool True),("header",String "This Simple Test Only Uses Ensure Effects"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}, reasonForRejection = Nothing}])
BoundaryLog (StartGroup (GroupTitle {unGroupTitle = "Group 1"}))
BoundaryLog (StartTest (TestDisplayInfo {testModAddress = TestModule {unTestModule = "DemoProject.Test.Rough"}, testTitle = "This is a Rough Test", testConfig = Object (fromList [("minDepth",String "DeepRegression"),("address",Object (fromList [("unTestModule",String "DemoProject.Test.Rough")])),("countries",Array [String "AU",String "NZ"]),("active",Bool True),("header",String "This is a Rough Test"),("environments",Array [String "TST",String "UAT",String "PreProd"])])}))
BoundaryLog (StartIteration (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}) (WhenClause {unWhenClause = "Pre"}) (ThenClause {unThenClause = "Post"}) (Object (fromList [("iid",Number 100.0),("pre",String "Pre"),("path",String "C:\\Vids\\SystemDesign\\VidList.txt"),("checks",Array [String "iid x 10 is small",String "iid x 10 is big"]),("post",String "Post")])))
IterationLog (Run StartInteraction)
IterationLog (Run (Message "Hi"))
IterationLog (Run (IOAction "This is an arbitrary Put Line"))
IterationLog (Run (InteractorSuccess (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}) (ApStateJSON {unApStateJSON = Object (fromList [("itemId",Number 100.0),("filePath",String "C:\\Vids\\SystemDesign\\VidList.txt"),("fileText",String "Pre ~ Post !!"),("exePath",String "NOT IMPLEMENTED")])})))
IterationLog (Run (PrepStateSuccess (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}) (DStateJSON {unDStateJSON = Object (fromList [("iidx10",Number 1000.0)])})))
IterationLog (Run StartChecks)
IterationLog (Run (CheckOutcome (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}) (CheckReport {result = GateFailExpected "this bug was introduced in an earlier version and will be fixed eventually", info = MessageInfo {message = "iid x 10 is small", additionalInfo = Just "the iid x 10 (1000) is expected to be less than 200"}})))
IterationLog (Run (CheckOutcome (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}) (CheckReport {result = Skip, info = MessageInfo {message = "iid x 10 is big", additionalInfo = Just "the iid x 10 (1000) is expected to be greater than 500"}})))
BoundaryLog (EndIteration (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 100}))
BoundaryLog (StartIteration (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 110}) (WhenClause {unWhenClause = "Pre"}) (ThenClause {unThenClause = "Post"}) (Object (fromList [("iid",Number 110.0),("pre",String "Pre"),("path",String "C:\\Vids\\SystemDesign\\VidList.txt"),("checks",Array [String "pass every time"]),("post",String "Post")])))
IterationLog (Run StartInteraction)
IterationLog (Run (Message "Hi"))
IterationLog (Run (IOAction "This is an arbitrary Put Line"))
IterationLog (Run (Message "SHould Crash"))
IterationLog (Run (Message ""))
IterationLog (Run (IOAction "Debug Stack"))
IterationLog (Run (InteractorSuccess (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 110}) (ApStateJSON {unApStateJSON = Object (fromList [("itemId",Number 110.0),("filePath",String "C:\\Vids\\SystemDesign\\VidList.txt"),("fileText",String "Pre ~ Post !!"),("exePath",String "NOT IMPLEMENTED")])})))
IterationLog (Run (PrepStateFailure (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 110}) (AppEnsureError (EnsureError "I do not like 110 in prepstate"))))
IterationLog (Run StartChecks)
IterationLog (Run (CheckOutcome (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 110}) (CheckReport {result = Skip, info = MessageInfo {message = "pass every time", additionalInfo = Just "Validation checks not executed"}})))
BoundaryLog (EndIteration (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 110}))
BoundaryLog (StartIteration (ItemId {tstModule = TestModule {unTestModule = "DemoProject.Test.Rough"}, itmId = 120}) (WhenClause {unWhenClause = "Pre"}) (ThenClause {unThenClause = "Post"}) (Object (fromList [("iid",Number 120.0),("pre",String "Pre"),("path",String "R:\\Vids\\SystemDesign\\Wrong.txt"),("checks",Array [String "pass every time"]),("post",String "Post")])))
IterationLog (Run StartInteraction)
