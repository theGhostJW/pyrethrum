# Use the latest official Ubuntu image as a base
FROM ubuntu:latest

# large chunks of this file "inspired by" aka. plagerised from https://github.com/vzarytovskii/haskell-dev-env/blob/master/.devcontainer/Dockerfile
# use
# docker build -t "haskell" -f DockerfileHaskell .
# docker tag haskell theghostjw/haskell:latest
# docker push theghostjw/haskell:latest

# Set environment variables to avoid interactive prompts during package installation
ARG GHC_VERSION=9.8.2
ARG CABAL_VERSION=3.12.1.0
ARG HLS_VERSION=2.9.0.1
# for some reason hls trys to download stack if it is not there
ARG STACK_VERSION=2.15.7

ENV USERNAME=vscode \
    # modified from https://github.com/vzarytovskii/haskell-dev-env/blob/master/.devcontainer/Dockerfile 
    # this 1000 is aready taken by ubuntu
    USER_UID=1001 \
    USER_GID=1001 \
    DEBIAN_FRONTEND=noninteractive \
    GHC_VERSION=${GHC_VERSION} \
    CABAL_VERSION=${CABAL_VERSION} 

# Update the package list and install some basic utilities
RUN apt-get update && \
    apt-get install -y \
    wget \
    git \
    sudo \
    # GHCUp Requirements https://www.haskell.org/ghcup/install/#version-23
    build-essential \
    curl \
    bash \
    build-essential \ 
    libffi-dev \
    libffi8ubuntu1 \
    libgmp-dev \
    libgmp10 \
    libncurses-dev \
    pkg-config \
    # used by zlib used by
    zlib1g-dev \
    && apt-get clean 

# Explicitly export PATH changes
RUN groupadd --gid ${USER_GID} ${USERNAME} && \
    useradd -ms /bin/bash -K MAIL_DIR=/dev/null --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME} && \
    echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME}

USER ${USER_UID}:${USER_GID}
WORKDIR /home/${USERNAME}
ENV PATH="/home/${USERNAME}/.local/bin:/home/${USERNAME}/.cabal/bin:/home/${USERNAME}/.ghcup/bin:$PATH"

# RUN chmod -R 700 /home/${USERNAME}/.local/bin /home/${USERNAME}/.cabal/bin /home/${USERNAME}/.ghcup/bin
RUN echo "export PATH=${PATH}" >> /home/${USERNAME}/.profile

# Download ghciwatch binary
RUN curl -L -o /usr/local/bin/ghciwatch https://github.com/MercuryTechnologies/ghciwatch/releases/download/v1.0.1/ghciwatch-x86_64-linux && \
    chmod +x /usr/local/bin/
    
# get ghcup install script
RUN curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 \
    BOOTSTRAP_HASKELL_GHC_VERSION=${GHC_VERSION} \
    BOOTSTRAP_HASKELL_CABAL_VERSION=${CABAL_VERSION} \
    BOOTSTRAP_HASKELL_INSTALL_HLS=1 \
    sh

RUN ghcup install stack ${STACK_VERSION} \
    ghcup set stack ${STACK_VERSION}

RUN ghcup install hls ${HLS_VERSION} \
    ghcup set hls ${HLS_VERSION}

# install other tools
RUN cabal update 

RUN cabal install hpack

RUN cabal install turtle

# Main settings:
#   * BOOTSTRAP_HASKELL_NONINTERACTIVE - any nonzero value for noninteractive installation
#   * BOOTSTRAP_HASKELL_NO_UPGRADE - any nonzero value to not trigger the upgrade
#   * BOOTSTRAP_HASKELL_MINIMAL - any nonzero value to only install ghcup
#   * GHCUP_USE_XDG_DIRS - any nonzero value to respect The XDG Base Directory Specification
#   * BOOTSTRAP_HASKELL_VERBOSE - any nonzero value for more verbose installation
#   * BOOTSTRAP_HASKELL_GHC_VERSION - the ghc version to install
#   * BOOTSTRAP_HASKELL_CABAL_VERSION - the cabal version to install
#   * BOOTSTRAP_HASKELL_CABAL_XDG - don't disable the XDG logic (this doesn't force XDG though, because cabal is confusing)
#   * BOOTSTRAP_HASKELL_INSTALL_NO_STACK - disable installation of stack
#   * BOOTSTRAP_HASKELL_INSTALL_NO_STACK_HOOK - disable installation stack ghcup hook
#   * BOOTSTRAP_HASKELL_INSTALL_HLS - whether to install latest hls
#   * BOOTSTRAP_HASKELL_ADJUST_BASHRC - whether to adjust PATH in bashrc (prepend)
#   * BOOTSTRAP_HASKELL_ADJUST_CABAL_CONFIG - whether to adjust mingw paths in cabal.config on windows
#   * BOOTSTRAP_HASKELL_DOWNLOADER - which downloader to use (default: curl)
#   * GHCUP_BASE_URL - the base url for ghcup binary download (use this to overwrite https://downloads.haskell.org/~ghcup with a mirror)
#   * GHCUP_MSYS2_ENV - the msys2 environment to use on windows, see https://www.msys2.org/docs/environments/ (defauts to MINGW64, MINGW32 or CLANGARM64, depending on the architecture)


# Copy any local files to the container (if needed)
# COPY . /home/dockeruser/

# Expose a port if the application needs it
# EXPOSE 8080

# Specify the default command to run when the container starts
CMD ["bash"]
